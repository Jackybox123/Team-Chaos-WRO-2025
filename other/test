import cv2
import numpy as np
import matplotlib.pyplot as plt

def adjust_hsv_thresholds(image):
    """Dynamically adjust HSV color thresholds based on lighting conditions."""
    brightness = np.mean(cv2.cvtColor(image, cv2.COLOR_BGR2GRAY))  # Get avg brightness

    # Adjust saturation & value thresholds based on brightness level
    if brightness < 50:   # Very dark room
        s_lower, s_upper = 50, 255
        v_lower, v_upper = 50, 255
    elif brightness > 200:  # Very bright room
        s_lower, s_upper = 80, 255
        v_lower, v_upper = 100, 255
    else:  # Normal lighting
        s_lower, s_upper = 100, 255
        v_lower, v_upper = 70, 255

    return s_lower, s_upper, v_lower, v_upper

def segment_and_replace_colors(image):
    """Segment and replace colors with predefined pure colors."""
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # Define pure colors in HSV
    color_map = {
        "red": ([0, 100, 70], [10, 255, 255], [170, 100, 70], [180, 255, 255]),
        "green": ([35, 100, 70], [85, 255, 255]),
        "blue": ([90, 100, 70], [130, 255, 255]),
        "yellow": ([20, 100, 70], [30, 255, 255]),
        "orange": ([10, 100, 70], [20, 255, 255]),
        "white": ([0, 0, 200], [180, 50, 255]),
        "black": ([0, 0, 0], [180, 255, 50])
    }

    # Output image
    output = np.zeros_like(image)

    # Pure BGR colors to replace segmented regions
    pure_colors = {
        "red": (0, 0, 255),
        "green": (0, 255, 0),
        "blue": (255, 0, 0),
        "yellow": (0, 255, 255),
        "orange": (0, 165, 255),
        "white": (255, 255, 255),
        "black": (0, 0, 0)
    }

    # Apply color segmentation and replacement
    for color, ranges in color_map.items():
        lower1 = np.array(ranges[0])
        upper1 = np.array(ranges[1])
        mask = cv2.inRange(hsv, lower1, upper1)

        if len(ranges) == 4:  # Handles red which has two HSV ranges
            lower2 = np.array(ranges[2])
            upper2 = np.array(ranges[3])
            mask2 = cv2.inRange(hsv, lower2, upper2)
            mask = cv2.bitwise_or(mask, mask2)

        output[mask > 0] = pure_colors[color]

    return output

# Load the image
image_path = "/home/pi/mycar/data4pccw/images/435_cam_image_array_.jpg"
image = cv2.imread(image_path)

if image is None:
    print("Error: Could not read image. Check the path.")
else:
    # Apply CLAHE to normalize brightness
    lab = cv2.cvtColor(image, cv2.COLOR_BGR2LAB)
    l, a, b = cv2.split(lab)
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8,8))
    l = clahe.apply(l)  # Apply CLAHE to the L-channel
    lab = cv2.merge((l, a, b))
    image = cv2.cvtColor(lab, cv2.COLOR_LAB2BGR)

    # Process image
    result_image = segment_and_replace_colors(image)

    # Show images
    fig, ax = plt.subplots(1, 2, figsize=(12, 6))
    ax[0].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    ax[0].set_title("Original Image (Preprocessed)")
    ax[0].axis("off")

    ax[1].imshow(cv2.cvtColor(result_image, cv2.COLOR_BGR2RGB))
    ax[1].set_title("Segmented Image (Pure Colors Applied)")
    ax[1].axis("off")

    plt.show()
