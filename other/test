import cv2
import numpy as np
import donkeycar as dk
import time

# Initialize Donkey Car's camera
IMAGE_W, IMAGE_H = 160, 120
camera = dk.parts.Camera(width=IMAGE_W, height=IMAGE_H)
camera.open()

# LAB color range for obstacle detection
rRed = np.array([[0, 171, 106], [255, 195, 135]])  # Red Pillar
rGreen = np.array([[0, 45, 0], [255, 117, 153]])   # Green Pillar

# Morphological kernel
kernel = np.ones((5, 5), np.uint8)

# Function to process the image
def process_image(image, color_range):
    img_lab = cv2.cvtColor(image, cv2.COLOR_BGR2Lab)  # Convert to LAB
    img_blur = cv2.GaussianBlur(img_lab, (7, 7), 0)  # Apply Gaussian Blur
    mask = cv2.inRange(img_blur, color_range[0], color_range[1])  # Thresholding
    mask = cv2.erode(mask, kernel, iterations=1)  # Erosion
    mask = cv2.dilate(mask, kernel, iterations=1)  # Dilation
    return mask

# Function to find contours
def detect_obstacle(mask):
    contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    if contours:
        largest = max(contours, key=cv2.contourArea)
        area = cv2.contourArea(largest)
        if area > 100:  # Minimum threshold to consider an obstacle
            x, y, w, h = cv2.boundingRect(largest)
            return (x, y, w, h)
    return None

# Main loop
while True:
    img = camera.read()  # Capture an image from the Donkey Car camera
    if img is None:
        print("No image captured, exiting...")
        break
    
    mask_red = process_image(img, rRed)
    mask_green = process_image(img, rGreen)
    
    red_pillar = detect_obstacle(mask_red)
    green_pillar = detect_obstacle(mask_green)
    
    if red_pillar:
        print("Turn Left (Red Pillar Detected)")
    elif green_pillar:
        print("Turn Right (Green Pillar Detected)")
    else:
        print("Move Forward (No Obstacle Detected)")

    # Optional: Show the image and masks
    cv2.imshow("Original Image", img)
    cv2.imshow("Red Mask", mask_red)
    cv2.imshow("Green Mask", mask_green)

    # Exit the loop if the user presses 'q'
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cv2.destroyAllWindows()
camera.close()
